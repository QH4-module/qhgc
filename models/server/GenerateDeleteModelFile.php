<?php
/**
 * File Name: GenerateDeleteModelFile.php
 * ©2020 All right reserved Qiaotongtianxia Network Technology Co., Ltd.
 * @author: hyunsu
 * @date: 2021/4/7 2:21 下午
 * @email: hyunsu@foxmail.com
 * @description:
 * @version: 1.0.0
 * ============================= 版本修正历史记录 ==========================
 * 版 本:          修改时间:          修改人:
 * 修改内容:
 *      //
 */

namespace qh4module\qhgc\models\server;


use qh4module\qhgc\external\ExtQhgc;
use qh4module\qhgc\models\GenerateTool;
use qttx\helper\StringHelper;

class GenerateDeleteModelFile
{
    public $dir;
    public $columns;
    public $classname = 'Delete';
    public $namespace;
    public $active_record_classname;
    public $model_classname;
    public $table_name;
    /**
     * @var ExtQhgc
     */
    public $external;

    protected $use_class;

    public function run()
    {
        $primary = call_user_func([$this->active_record_classname, 'primaryKey']);
        $this->use_class[] = $this->active_record_classname;
        $this->use_class[] = $this->model_classname;
        $this->use_class[] = 'QTTX';

        $content = GenerateTool::loadTemplate($this->template(), [
            'classname' => $this->classname,
            'time' => date('Y-m-d H:i:s'),
            'namespace' => $this->namespace,
            'version' => VERSION,
            'active_record_classname' => GenerateTool::fullClass2Single($this->active_record_classname),
            'model_classname' => GenerateTool::fullClass2Single($this->model_classname),
            'table_name' => $this->table_name,
            'primary'=>$primary,
            'delete_param' => $this->getDelete(),
            'use_class' => GenerateTool::formatUseClass($this->use_class),
        ]);


        $filename = StringHelper::combPath($this->dir, $this->classname . '.php');
        file_put_contents($filename, $content);
    }

    protected function template()
    {
        return '<?php
/**
 * File Name: {{classname}}.php
 * Automatically generated by QHGC tool
 * @date: {{time}}
 * @version: {{version}}
 */

namespace {{namespace}};


{{use_class}}

/**
 * Class {{classname}}
 * 从{{table_name}}表的删除数据
 * @package {{namespace}}
 */
class {{classname}} extends {{model_classname}}
{
    /**
     * @var string[]|int[] 接收参数,必须：主键
     */
    public ${{primary}}s;
    
    /**
     * @inheritDoc
     */
    public function rules()
    {
        return [
            [[\'{{primary}}s\'],\'required\'],
            [[\'{{primary}}s\'], \'array\', \'type\' => function ($value) {
                return is_string($value) || is_numeric($value);
            }],
        ];
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        $db = QTTX::$app->db;

        $db->beginTrans();

        try {

            $result = {{active_record_classname}}::find($db)
                ->whereIn(\'{{primary}}\', $this->{{primary}}s)
                ->all();
            if (empty($result)) {
                $this->addError(\'{{primary}}s\', \'删除的条目不存在\');
                return false;
            }

            /**
             * @var $item {{active_record_classname}}
             */
            foreach ($result as $item) {
                {{delete_param}}
            }

            $db->commitTrans();

            return true;

        } catch (\Exception $exception) {
            $db->rollBackTrans();
            
            throw $exception;
        }
    }
}
';
    }


    protected function getDelete()
    {
        $del_field = '';
        $tags = $this->external->deleteTagField();
        $tag_keys = array_keys($tags);

        foreach ($this->columns as $item) {
            if (in_array($item['COLUMN_NAME'],$tag_keys)) {
                $del_field = $item['COLUMN_NAME'];
                break;
            }
        }
        if (!$del_field) {
            return $this->getRealDelete();
        }

        return $this->getFlagDelete($del_field, $tags[$del_field][1]);
    }

    protected function getFlagDelete($field,$value)
    {
        $temp = '// 伪删除
                $item->{{field}} = {{value}};
                $item->update($db);';

        return GenerateTool::loadTemplate($temp, [
            'field' => $field,
            'value' => $value
        ]);
    }


    protected function getRealDelete()
    {
        $temp = '// 真正的删除
                $item->update($db);';

        return $temp;
    }


}