<?php
/**
 * File Name: GenerateCreateModelFile.php
 * ©2020 All right reserved Qiaotongtianxia Network Technology Co., Ltd.
 * @author: hyunsu
 * @date: 2021/4/7 8:41 上午
 * @email: hyunsu@foxmail.com
 * @description:
 * @version: 1.0.0
 * ============================= 版本修正历史记录 ==========================
 * 版 本:          修改时间:          修改人:
 * 修改内容:
 *      //
 */

namespace qh4module\qhgc\models\server;


use qh4module\qhgc\external\ExtQhgc;
use qh4module\qhgc\models\GenerateTool;
use qttx\helper\StringHelper;

class GenerateCreateModelFile
{
    public $dir;
    public $columns;
    public $classname = 'Create';
    public $namespace;
    public $active_record_classname;
    public $model_classname;
    public $table_name;

    /**
     * @var ExtQhgc
     */
    public $external;

    protected $use_class;


    public function run()
    {

        $primary = call_user_func([$this->active_record_classname, 'primaryKey']);
        $this->use_class[] = $this->active_record_classname;
        $this->use_class[] = $this->model_classname;

        $content = GenerateTool::loadTemplate($this->template(), [
            'classname' => $this->classname,
            'time' => date('Y-m-d H:i:s'),
            'namespace' => $this->namespace,
            'version' => VERSION,
            'active_record_classname' => GenerateTool::fullClass2Single($this->active_record_classname),
            'model_classname' => GenerateTool::fullClass2Single($this->model_classname),
            'table_name' => $this->table_name,
            'require_rule'=>$this->getRules(),
            'received_param' => $this->getReceiveParam(),
            'field_assign' => $this->getCols($primary),
            'primary_assign'=>$this->getPrimaryCol($primary),
            'use_class' => GenerateTool::formatUseClass($this->use_class),
        ]);


        $filename = StringHelper::combPath($this->dir, $this->classname . '.php');
        file_put_contents($filename, $content);
    }


    protected function template()
    {
        return '<?php
/**
 * File Name: {{classname}}.php
 * Automatically generated by QHGC tool
 * @date: {{time}}
 * @version: {{version}}
 */

namespace {{namespace}};


use qttx\helper\ArrayHelper;
{{use_class}}

/**
 * Class {{classname}}
 * {{table_name}}表新增一条数据
 * @package {{namespace}}
 */
class {{classname}} extends {{model_classname}}
{
    {{received_param}}

    /**
     * @inheritDoc
     */
    public function rules()
    {
        return ArrayHelper::merge([
            {{require_rule}}
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        $model = new {{active_record_classname}}();
        {{primary_assign}}{{field_assign}}    
        return $model->insert();
    }
}';
    }


    public function getReceiveParam()
    {
        $temp = '
    /**
     * @var %s接收参数,%s：%s
     */
    public $%s;' . PHP_EOL;

        $str = '';

        $rules = GenerateTool::getRuleByModel($this->model_classname);

        foreach ($this->columns as $item) {
            if (!$item['is_edit']) continue;
            $s1 = GenerateTool::getFieldDocType($rules,$item['COLUMN_NAME']);
            $s2 = $item['required'] ? '必须' : '非必须';
            $str .= sprintf($temp, $s1, $s2, $item['title'], $item['COLUMN_NAME']);
        }

        return $str;
    }


    private function getRules()
    {
        $temp = "[[%s],'required']";
        $ary = [];
        foreach ($this->columns as $col) {
            if ($col['is_edit'] && $col['required']) {
                $ary[] = "'" . $col['COLUMN_NAME'] . "'";
            }
        }

        return sprintf($temp, implode(',', $ary));
    }

    private function getPrimaryCol($primary)
    {
        $columns = $this->columns;
        $temp2 = '$%s = QTTX::$app->snowflake->id();' . PHP_EOL;
        $temp = "\t\t\$model->%s = $%s;" . PHP_EOL;

        $str = '';

        foreach ($columns as $item) {
            if ($item['COLUMN_NAME'] == $primary && !$item['is_edit']) {
                if (isset($item['EXTRA']) && $item['EXTRA'] == 'auto_increment') {
                    // 如果主键是自增,不需要赋值
                    return PHP_EOL;
                }
                // 否则主键使用雪花生成
                $str .= sprintf($temp2, $item['COLUMN_NAME']);
                $str .= sprintf($temp, $item['COLUMN_NAME'], $item['COLUMN_NAME']);
                $this->use_class[] = 'QTTX';
                return $str;
            }

        }
        return PHP_EOL;
    }

    protected function getCols($primary)
    {
        $temp = "\t\t\$model->%s = %s;" . PHP_EOL;

        $str = '';

        foreach ($this->columns as $item) {
            // 如果是主键,不需要编辑,则略过
            if ($item['COLUMN_NAME'] == $primary && !$item['is_edit']) {
                continue;
            }
            if ($item['is_edit']) {
                $s1 = '$this->' . $item['COLUMN_NAME'];
            } else if ($item['default_value'] || $item['default_value'] === 0 || $item['default_value'] === false) {
                $rules = GenerateTool::getRuleByModel($this->model_classname);
                if (in_array($rules[$item['COLUMN_NAME']], ['integer', 'number', 'bool'])) {
                    $s1 = intval($item['default_value']);
                } else {
                    $s1 = $item['default_value'];
                }
            } else if ($item['IS_NULLABLE'] === 'NO') {
                $s1 = self::generateDefaultValue($item);
            } else {
                continue;
            }

            $str .= sprintf($temp, $item['COLUMN_NAME'], $s1);
        }

        return $str;
    }

    protected function generateDefaultValue($col)
    {

        if (in_array($col['COLUMN_NAME'], $this->external->defaultUserIdField())) {
            if (!in_array('qh4module\token\TokenFilter', $this->use_class)) {
                $this->use_class[] = 'qh4module\token\TokenFilter';
            }
            return 'TokenFilter::getPayload(\'user_id\')';
        }else if (in_array($col['COLUMN_NAME'], $this->external->defaultTimestampField())) {
            return 'time()';
        }


        $source = [
            'integer' => ['TINYINT', 'SMALLINT', 'MEDIUMINT', 'INT', 'INTEGER', 'BIGINT'],
            'number' => ['FLOAT', 'DOUBLE', 'DECIMAL'],
            'date' => ['DATE', 'TIME', 'YEAR', 'DATETIME', 'TIMESTAMP'],
            'string' => ['CHAR', 'VARCHAR', 'TINYBLOB', 'TINYTEXT', 'BLOB', 'TEXT', 'MEDIUMBLOB', 'MEDIUMTEXT', 'LONGBLOB', 'LONGTEXT']
        ];

        $type = strtoupper($col['DATA_TYPE']);

        if (in_array($type, $source['integer'])) {
            return 0;
        } else if (in_array($type, $source['number'])) {
            return 0;
        } else if (in_array($type, $source['string'])) {
            return "''";
        } else if ($type == 'DATE') {
            return 'date("Y-m-d")';
        } else if ($type == 'TIME') {
            return 'date("H:i:s")';
        } else if ($type == 'YEAR') {
            return 'date("Y")';
        } else if ($type == 'DATETIME') {
            return 'date("Y-m-d H:i:s")';
        } else if ($type == 'TIMESTAMP') {
            return 'time()';
        } else {
            return "''";
        }
    }
}