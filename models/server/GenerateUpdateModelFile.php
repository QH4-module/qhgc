<?php
/**
 * File Name: GenerateUpdateModelFile.php
 * ©2020 All right reserved Qiaotongtianxia Network Technology Co., Ltd.
 * @author: hyunsu
 * @date: 2021/4/7 1:32 下午
 * @email: hyunsu@foxmail.com
 * @description:
 * @version: 1.0.0
 * ============================= 版本修正历史记录 ==========================
 * 版 本:          修改时间:          修改人:
 * 修改内容:
 *      //
 */

namespace qh4module\qhgc\models\server;


use qh4module\qhgc\external\ExtQhgc;
use qh4module\qhgc\models\GenerateTool;
use qttx\helper\StringHelper;

class GenerateUpdateModelFile
{
    public $dir;
    public $columns;
    public $classname = 'Update';
    public $namespace;
    public $active_record_classname;
    public $model_classname;
    public $table_name;

    /**
     * @var ExtQhgc
     */
    public $external;

    protected $use_class;

    public function run()
    {

        $primary = call_user_func([$this->active_record_classname, 'primaryKey']);
        $this->use_class[] = $this->active_record_classname;
        $this->use_class[] = $this->model_classname;

        $content = GenerateTool::loadTemplate($this->template(), [
            'classname' => $this->classname,
            'time' => date('Y-m-d H:i:s'),
            'namespace' => $this->namespace,
            'version' => VERSION,
            'active_record_classname' => GenerateTool::fullClass2Single($this->active_record_classname),
            'model_classname' => GenerateTool::fullClass2Single($this->model_classname),
            'table_name' => $this->table_name,
            'primary'=>$primary,
            'require_rule'=>$this->getRules($primary),
            'received_param' => $this->getReceiveParam($primary),
            'field_assign' => $this->getCols($primary),
            'use_class' => GenerateTool::formatUseClass($this->use_class),
        ]);


        $filename = StringHelper::combPath($this->dir, $this->classname . '.php');
        file_put_contents($filename, $content);
    }



    protected function template()
    {
        return '<?php
/**
 * File Name: Update.php
 * Automatically generated by QGC tool
 * @date 2021-03-16 11:25:21
 * @version 4.0.0
 */

namespace {{namespace}};


use qttx\helper\ArrayHelper;
{{use_class}}

/**
 * Class {{classname}}
 * 更新{{table_name}}表单条数据
 * @package {{namespace}}
 */
class {{classname}} extends {{model_classname}}
{
    {{received_param}}

    /**
     * @inheritDoc
     */
    public function rules()
    {
        return ArrayHelper::merge([
            {{require_rule}}
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        $model = {{active_record_classname}}::findOne($this->{{primary}});
        if (empty($model)) {
            $this->addError(\'{{primary}}\', \'更新条目不存在\');
            return false;
        }
{{field_assign}}

        return $model->update();
    }
}
';
    }

    public function getReceiveParam($primary)
    {
        $temp = '
    /**
     * @var %s接收参数,%s：%s
     */
    public $%s;' . PHP_EOL;

        $str = '';

        $rules = GenerateTool::getRuleByModel($this->model_classname);

        foreach ($this->columns as $item) {
            //如果是更新, 则主键是必须接收的参数
            if ($item['COLUMN_NAME'] == $primary) {
                $item['is_edit'] = true;
                $item['required'] = true;
            }
            if (!$item['is_edit']) continue;
            $s1 = GenerateTool::getFieldDocType($rules,$item['COLUMN_NAME']);
            $s2 = $item['required'] ? '必须' : '非必须';
            $str .= sprintf($temp, $s1, $s2, $item['title'], $item['COLUMN_NAME']);
        }

        return $str;
    }

    private function getRules($primary)
    {
        $temp = "[[%s],'required']";
        $ary = [];
        foreach ($this->columns as $col) {
            //如果是更新, 则主键是必须接收的参数
            if ($col['COLUMN_NAME'] == $primary) {
                $col['is_edit'] = true;
                $col['required'] = true;
            }
            if ($col['is_edit'] && $col['required']) {
                $ary[] = "'" . $col['COLUMN_NAME'] . "'";
            }
        }

        return sprintf($temp, implode(',', $ary));
    }

    public function getCols($primary)
    {
        $temp = "\t\t\$model->%s = %s;" . PHP_EOL;

        $str = '';

        foreach ($this->columns as $item) {
            // 如果是主键,则略过
            if ($item['COLUMN_NAME'] == $primary) {
                continue;
            }
            if ($item['is_edit']) {
                $s1 = '$this->' . $item['COLUMN_NAME'];
            } else{
                // 非编辑字段全部略过
                continue;
            }

            $str .= sprintf($temp, $item['COLUMN_NAME'], $s1);
        }

        return $str;
    }
}