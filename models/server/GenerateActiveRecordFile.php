<?php
/**
 * File Name: GenerateActiveRecordFile.php
 * ©2020 All right reserved Qiaotongtianxia Network Technology Co., Ltd.
 * @author: hyunsu
 * @date: 2021/5/18 2:20 下午
 * @email: hyunsu@foxmail.com
 * @description:
 * @version: 1.0.0
 * ============================= 版本修正历史记录 ==========================
 * 版 本:          修改时间:          修改人:
 * 修改内容:
 *      //
 */

namespace qh4module\qhgc\models\server;


use qh4module\qhgc\external\ExtQhgc;
use qh4module\qhgc\models\GenerateTool;
use qttx\helper\StringHelper;
use qttx\web\ServiceModel;

/**
 * Class GenerateActiveRecordFile
 * @package qh4module\qhgc\models\server
 * @property ExtQhgc $external
 */
class GenerateActiveRecordFile extends ServiceModel
{
    /**
     * @var string 接收参数
     */
    public $table_name;

    /**
     * @var string 接收参数
     */
    public $namespace;

    /**
     * @var string 类名
     */
    public $class_name;

    /**
     * @var string 接收参数
     */
    public $alias = '';

    /**
     * @var bool 接收参数
     */
    public $rewrite = false;


    private $columns = [];

    /**
     * @inheritDoc
     */
    public function rules()
    {
        return [
            [['table_name', 'namespace', 'class_name'], 'required'],
            [['table_name', 'namespace', 'class_name', 'alias'], 'string'],
        ];
    }

    public function run()
    {
        $path = '';
        // 处理 namespace
        $this->namespace = GenerateTool::formatNamespace($this->namespace);
        // 通过namespace 新建目录
        $ret = GenerateTool::mkdirDirByNamespace($this->namespace, $path);
        if ($ret !== true) {
            $this->addError('namespace', $ret);
            return false;
        }

        // 文件路径
        $file = StringHelper::combPath($path, $this->class_name . '.php');
        if (file_exists($file) && !$this->rewrite) {
            // 文件存在需要确认
            return -1;
        }

        $this->columns = GenerateTool::getColumns($this->table_name, $this->external);
        $ary_tb_name = GenerateTool::getTableName($this->table_name);

        $ar_content = GenerateTool::loadTemplate($this->template(), [
            'classname' => $this->class_name,
            'time' => date('Y-m-d H:i:s'),
            'namespace' => $this->namespace,
            'table_name' => $ary_tb_name['table_mask_name'],
            'alias' => $this->alias,
            'primary_key' => GenerateTool::getPrimaryKey($this->columns),
            'property' => $this->getProperty(),
            'version' => VERSION,
        ]);

        file_put_contents($file, $ar_content);

        return str_replace(ROOT_PATH, '', $file);
    }


    protected function template()
    {
        return '<?php
/**
 * File Name: {{classname}}.php
 * Automatically generated by QGC tool
 * @date: {{time}}
 * @version: {{version}}
 */

namespace {{namespace}};


use qttx\web\ActiveRecord;

/**
 * Class {{classname}}
 * @package {{namespace}}
 * @description 数据表tbl_project的ActiveRecord模型
{{property}}
 */
class {{classname}} extends ActiveRecord
{
    /**
     * @var string 数据表名
     */
    protected static $table_name = "{{table_name}}";

    /**
     * @var string 数据表别名
     */
    protected static $table_alias = "{{alias}}";

    /**
     * 返回数据表的主键
     * @return string
     */
    static function primaryKey()
    {
        return "{{primary_key}}";
    }
}
';
    }


    /**
     * 注释中的参数声明部分
     * @return string
     */
    private function getProperty()
    {
        list($int, $double) = GenerateTool::columnType();

        $temp = ' * @property {{type}} ${{field}} {{comment}}';

        $str = '';
        foreach ($this->columns as $item) {
            $data_type = strtoupper($item['DATA_TYPE']);

            if (in_array($data_type, $int)) {
                $type = 'int';
            } else if (in_array($data_type, $double)) {
                $type = 'double';
            } else {
                if ($item['IS_NULLABLE'] == 'NO') {
                    $type = 'string';
                } else {
                    $type = 'string|null';
                }
            }
            if ($str) $str .= PHP_EOL;
            $str .= GenerateTool::loadTemplate($temp, [
                'type' => $type,
                'field' => $item['COLUMN_NAME'],
                'comment' => $item['COLUMN_COMMENT'],
            ]);
        }
        return $str;
    }
}