<?php
/**
 * File Name: GenerateIndexModelFile.php
 * ©2020 All right reserved Qiaotongtianxia Network Technology Co., Ltd.
 * @author: hyunsu
 * @date: 2021/4/6 3:24 下午
 * @email: hyunsu@foxmail.com
 * @description:
 * @version: 1.0.0
 * ============================= 版本修正历史记录 ==========================
 * 版 本:          修改时间:          修改人:
 * 修改内容:
 *      //
 */

namespace qh4module\qhgc\models\server;


use qh4module\qhgc\external\ExtQhgc;
use qh4module\qhgc\models\GenerateTool;
use qttx\helper\StringHelper;

/**
 * Class GenerateIndexModelFile
 * @package qh4module\qhgc\models\server
 */
class GenerateIndexModelFile
{
    public $dir;
    public $columns;
    public $classname = 'Index';
    public $namespace;
    public $active_record_classname;
    public $model_classname;
    public $table_name;
    /**
     * @var ExtQhgc
     */
    public $external;

    protected $use_class;

    public function run()
    {

        $alias = call_user_func([$this->active_record_classname, 'tableAlias']);
        list($str_param, $str_where) = $this->getFilterParam($alias);
        $this->use_class[] = $this->active_record_classname;
        $this->use_class[] = $this->model_classname;

        $content = GenerateTool::loadTemplate($this->template(), [
            'classname' => $this->classname,
            'time' => date('Y-m-d H:i:s'),
            'namespace' => $this->namespace,
            'version' => VERSION,
            'active_record_classname' => GenerateTool::fullClass2Single($this->active_record_classname),
            'model_classname' => GenerateTool::fullClass2Single($this->model_classname),
            'table_name' => $this->table_name,
            'filter_params' => $str_param,
            'all_field' => self::getAllField($this->columns, $alias),
            'filter_where' => $str_where,
            'del_where' => $this->getDelWhere($alias),
            'use_class' => GenerateTool::formatUseClass($this->use_class),
        ]);

        $filename = StringHelper::combPath($this->dir, $this->classname . '.php');
        file_put_contents($filename, $content);
    }


    protected function template()
    {
        return '<?php
/**
 * File Name: {{classname}}.php
 * Automatically generated by QHGC tool
 * @date: {{time}}
 * @version: {{version}}
 */

namespace {{namespace}};


use qttx\helper\ArrayHelper;
use qh4module\qhgc\SorterValidator;
{{use_class}}

/**
 * Class {{classname}}
 * 分页获取{{table_name}}表的数据
 * @package {{namespace}}
 */
class {{classname}} extends {{model_classname}}
{
    /**
     * @var int 页数,从1开始
     */
    public $page = 1;

    /**
     * @var int 每页显示数量
     */
    public $limit = 10;

    /**
     * @var array 接收参数,排序规则
     * 格式:[\'id\'=>\'asc\',\'name\'=>\'desc\'],
     */
    public $sorter = [];
    {{filter_params}}

    /**
     * @inheritDoc
     */
    public function rules()
    {
        return ArrayHelper::merge([
            [[\'page\', \'limit\'], \'integer\'],
            [[\'sorter\'],\'sorter\'],
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function attributeLangs()
    {
        return ArrayHelper::merge(
            parent::attributeLangs(),
            [
                \'page\' => \'页数\',
                \'limit\' => \'每页条数\',
                \'sorter\' => \'排序规则\',
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        // 所有的字段,根据列表显示进行删减
        $fields = [{{all_field}}];

        // 构建基础查询
        $sql = {{active_record_classname}}::find()
            ->select($fields);

        // 追加筛选条件
        {{filter_where}}

        // 追加排序
        if ($this->sorter) {
            $sql->orderBy(SorterValidator::format2Mode1($this->sorter));
        }

        // 获取分页结果
        list($total, $data) = $sql{{del_where}}
            ->asArray()
            ->pageLimit($this->page, $this->limit);

        return array(
            \'total\' => $total,
            \'list\' => $data,
            \'page\' => $this->page,
            \'limit\' => $this->limit
        );
    }
}
';
    }

    public static function getAllField($columns, $alias, $only_list = true)
    {
        $ary = [];
        foreach ($columns as $item) {
            if (!$item['show_list'] && $only_list) {
                continue;
            }
            if ($alias) {
                $ary[] = "'`{$alias}`.`{$item['COLUMN_NAME']}`'";
            } else {
                $ary[] = "'`{$item['COLUMN_NAME']}`'";
            }
        }
        return implode(',', $ary);
    }


    protected function whereTemplate($type)
    {
        $rand = mt_rand(100, 999);
        $temp1 = "if (\$this->{{place}}) {
            \$sql->where('{{field}}= :{{place}}{$rand}')
                ->bindValue('{{place}}{$rand}',\$this->{{place}});
        }";
        $temp2 = "if (\$this->{{place}}) {
            \$sql->where('{{field}} like :{{place}}{$rand}')
                ->bindValue('{{place}}{$rand}', \"%{\$this->{{place}}}%\");
        }";
        $temp3 = "if (\$this->{{place}}) {
            \$sql->where('{{field}} like :{{place}}{$rand}')
                ->bindValue('{{place}}{$rand}', \"%{\$this->{{place}}}\");
        }";
        $temp4 = "if (\$this->{{place}}) {
            \$sql->where('{{field}} like :{{place}}{$rand}')
                ->bindValue('{{place}}{$rand}', \"{\$this->{{place}}}%\");
        }";
        switch ($type) {
            case '==':
                return $temp1;
            case '%value%':
                return $temp2;
            case '%value':
                return $temp3;
            case 'value%':
                return $temp4;
        }
        return $temp1;
    }

    protected function getDelWhere($alias)
    {
        $del_field = '';
        $tags = $this->external->deleteTagField();
        $tag_keys = array_keys($tags);

        foreach ($this->columns as $item) {
            if (in_array($item['COLUMN_NAME'], $tag_keys)) {
                $del_field = $item['COLUMN_NAME'];
                break;
            }
        }
        if (!$del_field) {
            return '';
        }

        $rand = mt_rand(100, 999);
        $temp = "
            ->where('{{field}}= :{{place}}{$rand}')
            ->bindValue('{{place}}{$rand}',{{value}})";
        if ($alias) {
            $field = "`{$alias}`.`{$del_field}`";
        } else {
            $field = "`{$del_field}`";
        }


        $value = $tags[$del_field][0];
        return GenerateTool::loadTemplate($temp, [
            'field' => $field,
            'place' => $del_field,
            'value' => $value,
        ]);
    }

    protected function getFilterParam($alias)
    {
        $str_param = '';
        $str_where = '';

        $temp_param = '
    /**
     * @var {{type}}接收参数，筛选字段{{title}}
     */
    public ${{field}};' . PHP_EOL;

        $rules = GenerateTool::getRuleByModel($this->model_classname);

        foreach ($this->columns as $item) {
            if (!$item['used_filter'] || !isset($rules[$item['COLUMN_NAME']])) {
                continue;
            }

            $s1 = GenerateTool::getFieldDocType($rules, $item['COLUMN_NAME']);

            $s2 = $item['title'] ? '：' . $item['title'] : '';
            $str_param .= GenerateTool::loadTemplate($temp_param, [
                'type' => $s1,
                'title' => $s2,
                'field' => $item['COLUMN_NAME']
            ]);

            if ($alias) {
                $field = "`{$alias}`.`{$item['COLUMN_NAME']}`";
            } else {
                $field = "`{$item['COLUMN_NAME']}`";
            }
            $str_where .= GenerateTool::loadTemplate($this->whereTemplate($item['used_filter']), [
                'field' => $field,
                'place' => $item['COLUMN_NAME'],
            ]);
        }

        return array($str_param, $str_where);
    }
}