<?php
/**
 * File Name: GenerateModelFile.php
 * ©2020 All right reserved Qiaotongtianxia Network Technology Co., Ltd.
 * @author: hyunsu
 * @date: 2021/4/2 10:53 上午
 * @email: hyunsu@foxmail.com
 * @description:
 * @version: 1.0.0
 * ============================= 版本修正历史记录 ==========================
 * 版 本:          修改时间:          修改人:
 * 修改内容:
 *      //
 */

namespace qh4module\qhgc\models\server;


use qh4module\qhgc\external\ExtQhgc;
use qh4module\qhgc\models\GenerateTool;
use qttx\exceptions\UserException;
use qttx\helper\StringHelper;
use qttx\web\ServiceModel;

class GenerateModelFile extends ServiceModel
{
    /**
     * @var string 接收参数
     */
    public $table_name;

    /**
     * @var string 接收参数
     */
    public $namespace;

    /**
     * @var string 接收参数
     */
    public $class_name;

    /**
     * @var array 接收参数
     */
    public $columns;

    /**
     * @var bool 接收参数
     */
    public $rewrite = false;

    /**
     * @var ExtQhgc
     */
    protected $external;

    public function rules()
    {
        return [
            [['table_name', 'namespace'], 'required'],
            [['table_name', 'namespace'], 'string'],
            [['columns'], 'array'],
        ];
    }

    public function run()
    {
        $path = '';
        // 处理 namespace
        $this->namespace = GenerateTool::formatNamespace($this->namespace);
        // 通过namespace 新建目录
        $ret = GenerateTool::mkdirDirByNamespace($this->namespace, $path);
        if ($ret !== true) {
            $this->addError('namespace', $ret);
            return false;
        }

        // 文件路径
        $file = StringHelper::combPath($path, $this->class_name . '.php');
        if (file_exists($file) && !$this->rewrite) {
            // 文件存在需要确认
            return -1;
        }

        $ary_tb_name = GenerateTool::getTableName($this->table_name);

        $ar_content = GenerateTool::loadTemplate($this->template(), [
            'classname' => $this->class_name,
            'time' => date('Y-m-d H:i:s'),
            'namespace' => $this->namespace,
            'table_name' => $ary_tb_name['table_name'],
            'rules' => $this->serializeRules(self::getRules($this->columns)),
            'langs' => $this->serializeLangs(self::getLangs($this->columns)),
            'version' => VERSION,
        ]);

        file_put_contents($file, $ar_content);

        return true;
    }

    protected function template()
    {
        return '<?php
/**
 * File Name: {{classname}}.php
 * Automatically generated by QGC tool
 * @date: {{time}}
 * @version: {{version}}
 */

namespace {{namespace}};


use qttx\web\Model;

/**
 * Class {{classname}}
 * @package {{namespace}}
 * @description 数据表{{table_name}}的Validate模型
 */
class {{classname}} extends Model
{

    /**
     * {@inheritDoc}
     */
    public function rules()
    {
        return {{rules}};
    }

    /**
     * {@inheritDoc}
     */
    public function attributeLangs()
    {
        return {{langs}};
    }
}
';
    }

    public static function getLangs($columns)
    {
        $langs = [];
        foreach ($columns as $row) {
            if (isset($row['title']) && $row['title']) {
                $langs[$row['COLUMN_NAME']] = $row['title'];
            }else{
                $langs[$row['COLUMN_NAME']] = lcfirst(StringHelper::underline2capital($row['COLUMN_NAME']));
            }
        }
        return $langs;
    }

    /**
     * 拼接校验规则
     * @param $columns
     * @return array
     */
    public static function getRules($columns)
    {
        $rules = [];

        // 必须的校验数组
        $require = [[], 'required'];
        foreach ($columns as $row) {
            // 字段是必须的
//            if ($row['required']) {
//                $require[0][] = $row['name'];
//            }
            // 判断类型
            switch ($row['validateType']) {
                case 'string':
                    $rules[] = self::stringRule($row);
                    break;
                case 'integer':
                    $rules[] = self::numberRule($row, 'integer');
                    break;
                case 'number':
                    $rules[] = self::numberRule($row, 'number');
                    break;
                case 'boolean':
                    $rules[] = self::boolRule($row);
                    break;
                case 'in':
                    $rules[] = self::rangeRule($row);
                    break;
                case 'match':
                    $rules[] = self::matchRule($row);
                    break;
                case 'url':
                    $rules[] = self::urlRule($row);
                    break;
                case 'idcard':
                    $rules[] = self::singleRule($row, 'idcard');
                    break;
                case 'account':
                    $rules[] = self::accountRule($row);
                    break;
                case 'mobile':
                    $rules[] = self::singleRule($row, 'mobile');
                    break;
                case 'custom':
                    $rules[] = self::customerRule($row);
                    break;
            }
        }

        $rules = self::mergeRule($rules);

        if (!empty($require[0])) {
            array_unshift($rules, $require);
        }

        return $rules;
    }

    /**
     * 计算单行校验,第二和第三元素的序列值,用于合并校验
     * @param $rule
     * @return false|string
     */
    public static function serializeRow($rule)
    {
        $ary = [];
        if (isset($rule[1])) {
            $ary[] = $rule[1];
        }
        if (isset($rule[2])) {
            $ary[] = $rule[2];
        }
        return json_encode($ary);
    }

    /**
     * 合并重复的验证
     * @param $rules
     * @return array
     */
    public static function mergeRule($rules)
    {
        // 保存第23位的校验值,校验值为键,值是第一次出现的单条验证数组
        $rows = [];
        foreach ($rules as $rule) {
            $serial = self::serializeRow($rule);
            if (array_key_exists($serial, $rows)) {
                $rows[$serial][0][] = $rule[0][0];
            } else {
                $rows[$serial] = $rule;
            }
        }
        return array_values($rows);
    }


    public static function customerRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        if (!$row['userFun']) {
            throw new UserException('自定义验证必须填写函数名称', 400);
        }
        $rule[] = $row['userFun'];
        return $rule;
    }


    public static function accountRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = 'account';
        $ary = [];
        if (isset($row['accountMode']) && $row['accountMode']) {
            $ary['mode'] = $row['accountMode'];
        }
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }


    public static function singleRule($row, $type)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = $type;
        $ary = [];
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }

    public static function urlRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = 'url';
        $ary = [];
        if (isset($row['urlNeedScheme']) && $row['urlNeedScheme']) {
            $ary['needSchemes'] = true;
        }
        if ($row['urlValidScheme']) {
            $ary['validSchemes'] = explode(',', $row['urlValidScheme']);
        }
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }

    public static function matchRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = 'match';
        $ary = [];
        if (isset($row['matchNot']) && $row['matchNot']) {
            $ary['not'] = true;
        }
        $ary['pattern'] = $row['pattern'];
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }


    public static function rangeRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = 'in';
        $ary = [];
        if (isset($row['rangeNot']) && $row['rangeNot']) {
            $ary['not'] = true;
        }
        if (isset($row['rangeStrict']) && $row['rangeStrict']) {
            $ary['strict'] = true;
        }
        $ary['range'] = explode(',', $row['range']);
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }


    public static function boolRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = 'boolean';
        $ary = [];
        if (isset($row['boolStrict']) && $row['boolStrict']) {
            $ary['strict'] = true;
        }
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }

    public static function numberRule($row, $type = 'number')
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = $type;
        $ary = [];
        if (isset($row['numMax']) && $row['numMax'] > 0) {
            $ary['max'] = $row['numMax'];
        }
        if (isset($row['numMin']) && $row['numMin'] > 0) {
            $ary['min'] = $row['numMin'];
        }
        if (isset($row['message']) && $row['message']) {
            $ary['message'] = $row['message'];
        }
        if (!empty($ary)) {
            $rule[] = $ary;
        }
        return $rule;
    }

    public static function stringRule($row)
    {
        $rule = [];
        $rule['space'] = 3;
        $rule[] = [$row['COLUMN_NAME']];
        $rule[] = 'string';
        if (isset($row['strLen']) && $row['strLen'] > 0) {
            $ary = ['length' => $row['strLen']];
            if (isset($row['message']) && $row['message']) {
                $ary['message'] = $row['message'];
            }
            $rule[] = $ary;
        } else {
            $ary = [];
            if (isset($row['strMaxLen']) && $row['strMaxLen'] > 0) {
                $ary['max'] = $row['strMaxLen'];
            }
            if (isset($row['strMinLen']) && $row['strMinLen'] > 0) {
                $ary['min'] = $row['strMinLen'];
            }
            if (isset($row['message']) && $row['message']) {
                $ary['message'] = $row['message'];
            }
            if (!empty($ary)) {
                $rule[] = $ary;
            }
        }
        return $rule;
    }

    private function serializeLangs($ary)
    {
        $str = '';
        $str .= '[';

        foreach ($ary as $key => $value) {
            if (trim($str) != '[') $str .= ', ';
            $str .= PHP_EOL;
            $str .= "\t\t\t";
            // 键不是数字,需要加上
            if (!is_numeric($key)) {
                $str .= "'{$key}' => ";
            }
            $str .= "'{$value}'";
        }
        $str .= PHP_EOL;
        $str .= "\t\t]";
        return $str;
    }

    private function serializeRules($ary, $recursion = 0)
    {
        $str = '';
        if (isset($ary['space'])) {
            for ($i = 0; $i < $ary['space']; $i++) {
                $str .= "\t";
            }
            unset($ary['space']);
        }
        $str .= '[';

        foreach ($ary as $key => $value) {
            if (trim($str) != '[') $str .= ', ';
            if ($recursion == 0) {
                $str .= PHP_EOL;
            }
            // 键不是数字,需要加上
            if (!is_numeric($key)) {
                $str .= "'{$key}' => ";
            }
            if (is_array($value)) {
                $str .= $this->serializeRules($value, $recursion + 1);
            } else {
                if (is_numeric($value)) {
                    $str .= $value;
                } else if (is_bool($value)) {
                    $str .= $value ? "true" : "false";
                } else {
                    $str .= "'{$value}'";
                }
            }
        }
        if ($recursion == 0) {
            $str .= PHP_EOL;
            $str .= "\t\t";
        }
        $str .= ']';
        return $str;
    }

}