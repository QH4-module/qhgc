/**
 * Automatically generated by QHGC tool
 * @date: {{time}}
 */
import React, {useRef, useState} from 'react';
import {Button, Space, Divider, Popconfirm, message, Modal} from 'antd';
import {PlusOutlined, QuestionCircleOutlined} from '@ant-design/icons';
import ProTable from '@ant-design/pro-table';
import {PageContainer} from "@ant-design/pro-layout";
import {useLocalStorageState, useSelections} from "ahooks";
import {history, Link} from 'umi';
import lodash from "lodash";
import YunReact from "@/utils/YunReact";
import {formatTableSort} from "@/utils/utils";
import api from "./service/api";
{{import}}

// 请求数据的方法
const requestData = (params, sort) => {
  const sorter = formatTableSort(sort);
  const postData = {
    ...params,
    sorter,
    page: params.current,
    limit: params.pageSize,
  }
  return new Promise(resolve => {
    YunReact.fetchPost(api.list, postData, (res) => {
      // 整理返回格式
      resolve({
        data: res.list,
        success: true,
        total: res.total,
      })
    })
  })
}


/**
 * 列表主函数
 * @returns {JSX.Element}
 * @constructor
 */
const Index = () => {
  // 批量操作开关
  const [disabledChecked, setDisabledChecked] = useState(true);
  const {
    selected,
    select,
    setSelected,
    unSelect,
    toggle
  } = useSelections([]);

  // 保存字段变动,并缓存到本地
  const [columnsStateMap, setColumnsStateMap] = useLocalStorageState('qh4_table_columns_{{rand}}', {
    // 这里可以放默认不显示的字段，格式： id:{show:false}
  })

  // table的引用,用于调用一些特定函数
  const actionRef = useRef();

  // 操作列渲染函数
  const actionRender = (value, record) => {
    return (
      <>
        <a onClick={(e) => {
          e.stopPropagation();
          history.push(`${api.ui_update_path}?id=${record.{{primary}}}`)
        }}>编辑</a>
        <Divider type="vertical"/>
        <Popconfirm
          title="确定要删除这条数据？"
          icon={<QuestionCircleOutlined style={{color: 'red'}}/>}
          onConfirm={e => {
            e.stopPropagation();
            deleteData([record.{{primary}}], false).then(() => actionRef.current.reload());
          }}
          onCancel={e => e.stopPropagation()}
        >
          <a onClick={e => e.stopPropagation()}>删除</a>
        </Popconfirm>
      </>
    )
  };

  const defaultColumns = [
{{default_columns}}
    {
      title: '操作',
      dataIndex: '{{primary}}',
      key: '_action',
      width: 140,
      fixed: 'right',
      hideInSearch: true,
      align: 'center',
      render: (value, record) => actionRender(value, record),
    },
  ];

  // 批量操作组件
  const rowSelection = disabledChecked ? null :
    {
      rowSelection: {
        fixed: true,
        columnWidth: 44,
        selectedRowKeys: selected,
        onSelect: (record, tag) => tag ? select(record.{{primary}}) : unSelect(record.{{primary}}),
        onSelectAll: (tag, selectedRows, changeRows) => { // 这里的全选指的是单页级
          const change_keys = changeRows.map(item => {
            return item.{{primary}};
          })
          if (tag) {
            setSelected([...selected, ...change_keys])
          } else {
            setSelected(lodash.difference(selected, change_keys))
          }
        }
      }
    }

  return (
    <PageContainer>
      <ProTable
        actionRef={actionRef}
        request={requestData}
        form={{syncToUrl: true}}
        rowKey="{{primary}}"
        pagination={{pageSize: 10}}
        // 滚动相关,这个值随字段数量自行调整到最佳宽度,或者删除禁止滚动
        scroll={{x: 1614}}
        columns={defaultColumns}
        {...rowSelection}
        tableAlertRender={({selectedRowKeys}) => (
          <Space size={24}>
          <span>
            已选 {selectedRowKeys.length} 项
            <a style={{marginLeft: 8}} onClick={() => setSelected([])}>
              取消选择
            </a>
          </span>
          </Space>
        )}
        tableAlertOptionRender={({selectedRowKeys}) => {
          return (
            <Space size={16}>
              <a onClick={() => {
                deleteData(selectedRowKeys, true).then(() => {
                  setSelected([]);
                  actionRef.current.reload();
                });
              }}>批量删除</a>
            </Space>
          );
        }}
        onRow={(record) => {
          return {
            // 行单击事件
            onClick: (event) => {
              event.stopPropagation();
              if (!disabledChecked) {
                toggle(record.{{primary}});
              }
            },
            // 行双击事件
            onDoubleClick: (event) => {
              event.stopPropagation();
              history.push(`${api.ui_detail_path}?id=${record.{{primary}}}`)
            }
          };
        }}
        toolbar={{
          actions: [
            <Link to={api.ui_create_path} key="button1">
              <Button icon={<PlusOutlined/>} type="primary">
                新建
              </Button>
            </Link>,
            <Button key="button1" onClick={() => setDisabledChecked(!disabledChecked)}>
              {disabledChecked ? '批量操作' : '取消'}
            </Button>
          ],
        }}
        columnsStateMap={columnsStateMap}
        onColumnsStateChange={(record) => setColumnsStateMap(record)}
      />
    </PageContainer>
  )

  // 删除数据的方法
  function deleteData(keys, tag) {
    return new Promise(resolve => {
      if (lodash.isEmpty(keys)) {
        message.warn('没有选择要删除的数据');
        return;
      }
      if (tag) {
        Modal.confirm({
          title: '删除确认',
          icon: <QuestionCircleOutlined style={{color: 'red'}}/>,
          content: `你确定要删除${keys.length}条数据吗？`,
          onOk() {
            YunReact.fetchPost(api.del, {{{primary}}s: keys}, (res) => {
              message.success('用户已成功删除。');
              resolve(res)
            });
          },
        });
      } else {
        YunReact.fetchPost(api.del, {{{primary}}s: keys}, (res) => {
          message.success('用户已成功删除。');
          resolve(res)
        });
      }
    })
  }
}

export default Index;
