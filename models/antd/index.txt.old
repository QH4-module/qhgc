/**
 * Automatically generated by QHGC tool
 * @date: {{time}}
 */
import React, {useState} from 'react';
import {useRequest, useLocalStorageState, useSelections} from 'ahooks';
import useUrlState from '@ahooksjs/use-url-state';
import {Link, history} from 'umi';
import {PageContainer, FooterToolbar} from "@ant-design/pro-layout";
import {Card, Button, Table, Form, Row, Col, Input, Checkbox, Space, Divider, Popconfirm, message, Modal} from 'antd';
import {DownOutlined, PlusOutlined, QuestionCircleOutlined, UpOutlined} from "@ant-design/icons";
import _ from 'lodash'
import YunReact from "@/utils/YunReact";
import '@/common/qh4-table.less';
import {formatSorter} from "@/utils/utils";
import TableHeaderRight from "@/components/table/TableHeaderRight";
import api from "./service/api";
{{import}}

/**
 * 列表页主函数
 * @returns {JSX.Element}
 * @constructor
 */
const Index = () => {
  // 筛选表单的form
  const [searchForm] = Form.useForm();
  // 是否展开筛选
  const [expand, setExpand] = useState(false);
  // 表格尺寸
  const [tableSize, setTableSize] = useState('default');
  // 批量操作开关
  const [disabledChecked, setDisabledChecked] = useState(true);
  const {
    selected,
    select,
    setSelected,
    unSelect,
    toggle,
  } = useSelections([]);

  // 不刷新页面URL联动型获取数据
  const [urlQuery, setUrlQuery] = useUrlState({page: 1, limit: 10});
  const _refresh = useRef();
  const {data, tableProps, run, refresh, params, pagination} =
    useRequest(async ({
                        current,
                        pageSize,
                        sorter,
                        ...other
                      }) => {
      // 构造请求体
      const postData = {page: current, limit: pageSize, sorter: formatSorter(sorter), ...other};
      return new Promise((resolve) => YunReact.fetchPost(api.list, postData, (res)=>{
        resolve(res);
        setUrlQuery({page: res.page, limit: res.limit})
      }));
    }, {
      initialData: {firstRequest: true},
      paginated: true,
      manual: true,
    });
  _refresh.current = refresh;

  // 页面首次加载执行
  useEffect(() => {
    let postData = {current: 1, pageSize: 10};
    if (data.firstRequest) {
      data.firstRequest = false;
      postData = {
        current: parseInt(urlQuery.page, 10),
        pageSize: parseInt(urlQuery.limit, 10)
      };
    }
    run(postData);
  }, [])

  // 操作列渲染函数
  const actionRender = (value, record) => {
    return (
      <>
        <a onClick={(e) => {
          e.stopPropagation();
          history.push(`${api.ui_update_path}?id=${record.{{primary}}}`)
        }}>编辑</a>
        <Divider type="vertical"/>
        <Popconfirm
          title="确定要删除这条数据？"
          icon={<QuestionCircleOutlined style={{color: 'red'}}/>}
          onConfirm={(e) => {
            e.stopPropagation();
            deleteData([record.id], false).then(() => _refresh.current());
          }}
          onCancel={(e) => e.stopPropagation()}
        >
          <a onClick={(e) => e.stopPropagation()}>删除</a>
        </Popconfirm>
      </>
    )
  };

  // 表格默认列数据
  const defaultColumns = [
{{default_columns}}
    {
      title: '操作',
      dataIndex: '{{primary}}',
      key: '_action',
      render: actionRender,
    },
  ];

  // 动态处理表格列,使用storage缓存到本地
  const [columns, setColumns] = useLocalStorageState('qh4_table_columns_{{rand}}', defaultColumns);

  return (
    <PageContainer>
      {/* ==================== 筛选表单部分 ==================== */}
      <Card>
        <Form
          form={searchForm}
          labelCol={{span: 6}}
          onFinish={(values) => run({...params[0], current: 1, ...values})}
        >
          <Row gutter={24}>
{{search_form_item}}
            <Col span={24} xxl={expand ? 24 : 6} style={{textAlign: 'right'}}>
              <Button type="primary" htmlType="submit">
                搜索
              </Button>
              <Button
                style={{margin: '0 12px'}}
                onClick={() => {
                  searchForm.resetFields();
                }}
              >
                重置
              </Button>
              <a onClick={() => {
                setExpand(!expand)
              }}>
                {expand ? <UpOutlined/> : <DownOutlined/>} 展开
              </a>
            </Col>
          </Row>
        </Form>
      </Card>

      {/* ==================== 表格部分 ==================== */}
      <Card className="qh4-table-card">
        <Table
          className="qh4-table"
          rowKey="{{primary}}"
          {...tableProps}
          // 这个值随字段数量自行调整到最佳宽度
          scroll={{x: 1614}}
          size={tableSize}
          columns={_.filter(columns, (o) => o._display !== false)}
          title={() => {
            /* ==================== 表格头部部分 ==================== */
            return (
              <Row gutter={24}>
                <Col span={12}>
                  <span style={{fontWeight: 'bold'}}>列表</span>
                </Col>
                <Col span={12} style={{textAlign: 'right'}}>
                  <Link to={api.ui_create_path}>
                    <Button type="primary">
                      <PlusOutlined/> 新建
                    </Button>
                  </Link>
                  <TableHeaderRight
                    onRefresh={refresh}
                    tableSize={tableSize}
                    setTableSize={setTableSize}
                    defaultColumns={defaultColumns}
                    columns={columns}
                    setColumns={(obj) => setColumns(obj)}
                  />
                </Col>
              </Row>
            )
          }}
          rowSelection={disabledChecked ? null : {
            fixed: true,
            columnWidth: '44px',
            selectedRowKeys: selected,
            onSelect: (record, tag) => tag ? select(record.{{primary}}) : unSelect(record.{{primary}}),
            onSelectAll: (tag, selectedRows, changeRows) => {
              const change_keys = changeRows.map(item => {
                return item.{{primary}};
              })
              if (tag) {
                setSelected([
                  ...selected,
                  ...change_keys
                ])
              } else {
                setSelected(_.difference(selected, change_keys))
              }
            }
          }}
          onRow={(record) => {
            return {
              // 行单击事件
              onClick: (event) => {
                event.stopPropagation();
                if (!disabledChecked) {
                  toggle(record.{{primary}});
                }
              },
              // 行双击事件
              onDoubleClick: (event) => {
                event.stopPropagation();
                history.push(`${api.ui_detail_path}?id=${record.{{primary}}}`)
              }
            };
          }}
        />
      </Card>

      {/* ==================== 底部固定工具栏部分 ==================== */}
      <FooterToolbar renderContent={() => {
        return (
          <div className="qh4-table-footer-toolbar-content">
            {
              disabledChecked ?
                <Space>
                  <Button onClick={() => {
                    setDisabledChecked(false)
                  }}>批量操作</Button>
                </Space>
                : <>
                  <Space size="middle">
                    <Checkbox indeterminate={selected.length > 0 && selected.length < pagination.total}
                              checked={selected.length >= pagination.total}>
                      已选中 {selected.length} 项
                    </Checkbox>
                    <a onClick={() => {
                      setSelected([]);
                      setDisabledChecked(true);
                    }}>取消</a>
                    <Divider type="vertical"/>
                    <span>总计数量：{pagination.total} 条</span>
                  </Space>
                  <Space size="middle">
                    <Button danger onClick={() => {
                      deleteData(selected, true).then(refresh)
                    }}>批量删除</Button>
                  </Space>
                </>
            }
          </div>
        )
      }}/>
    </PageContainer>
  )

  function deleteData(keys, tag) {
    return new Promise(resolve => {
      if (_.isEmpty(keys)) {
        message.warn('没有选择要删除的数据');
        return;
      }
      if (tag) {
        Modal.confirm({
          title: '删除确认',
          icon: <QuestionCircleOutlined style={{color: 'red'}}/>,
          content: `你确定要删除${keys.length}条数据吗？`,
          onOk() {
            YunReact.fetchPost(api.del, {{{primary}}s: keys}, (res) => {
              message.success('数据已成功删除。');
              resolve(res)
            });
          },
        });
      } else {
        YunReact.fetchPost(api.del, {{{primary}}s: keys}, (res) => {
          message.success('数据已成功删除。');
          resolve(res)
        });
      }
    })
  }
}

export default Index;
